@model MwProject.Core.ViewModels.ProjectRequirementViewModel

@* 
    Okno do edycji informacji jakościowych i ekonomicznych przypisanych do projektu
    Wywołane z osobnego okna z samą tabelką
*@

@{
    ViewBag.Title = Model.Heading;
}

<h2>@Model.Heading</h2>

<div class="row bg-light bg-gradient">
    <div class="col-lg-6">
        <!-- po submit wywoła się metode ProjectRequirement2 w kontrolerze ProjectRequirement typu HttpPost -->
        @using (Html.BeginForm("ProjectRequirement2", "ProjectRequirement"))
        {
            @Html.AntiForgeryToken()

            <!-- Wyświetlenie podsumowania walidacji-->
            @Html.ValidationSummary()

            if (Model.ProjectRequirement.Id == 0)
            {
                <p class="alert alert-info mb-4 mt-4">Wszystkie pola są <strong>wymagane</strong> </p>
            }

            @Html.HiddenFor(x => x.ProjectRequirement.Id)
            @Html.HiddenFor(x => x.ProjectRequirement.ProjectId)


            <div class="form-group mb-3">
                @Html.LabelFor(x => x.ProjectRequirement.RequirementId)
                @Html.DropDownListFor(x => x.ProjectRequirement.RequirementId,
               new SelectList(Model.Requirements, "Id", "Name"),
               "--- Wybierz parametr techniczny ---",
               new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.ProjectRequirement.RequirementId)
            </div>

            <div class="form-group mb-3">
                @Html.LabelFor(x => x.ProjectRequirement.Comment)
                @Html.TextAreaFor(x => x.ProjectRequirement.Comment,
               new { @class = "form-control" })
            </div>

            <div class="form-group mb-3">
                @Html.LabelFor(x => x.ProjectRequirement.Value)
                @Html.TextBoxFor(x => x.ProjectRequirement.Value,
                new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.ProjectRequirement.Value)
            </div>

            <div class="form-check form-switch mb-5">
                @Html.CheckBoxFor(x => x.ProjectRequirement.ShowValue, new { @class = "form-check-input" })
                @Html.LabelFor(x => x.ProjectRequirement.ShowValue, new { @class = "form-check-label" })
                @Html.ValidationMessageFor(x => x.ProjectRequirement.ShowValue)
            </div>

            <div class="form-group mb-3">
                @Html.LabelFor(x => x.ProjectRequirement.YesNo, new { @class = "form-check-label" })
            </div>

            <div class="form-check form-switch mb-3">

                <div class="form-check">
                    @Html.RadioButtonFor(x => x.ProjectRequirement.YesNo, "0",
                   new { @class = "form-check-input" })

                    <label class="form-check-label" for="exampleRadios1"> Ukryj </label>
                </div>

                <div class="form-check">
                    @Html.RadioButtonFor(x => x.ProjectRequirement.YesNo, "1",
                   new { @class = "form-check-input" })

                    <label class="form-check-label" for="exampleRadios1"> Tak </label>
                </div>

                <div class="form-check">
                    @Html.RadioButtonFor(x => x.ProjectRequirement.YesNo, "2",
                   new { @class = "form-check-input" })

                    <label class="form-check-label" for="exampleRadios1"> Nie </label>
                </div>
            </div>

            <button class="btn btn-primary btn-lg mb-5" type="submit">
                Zapisz
            </button>
        }
    </div>


</div>

@section scripts
{
    <script type="text/javascript">

        $(document).ready(function () {

            // w formatowaniu ma być przecinek, a nie kropka
            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }
        });

    </script>
}

