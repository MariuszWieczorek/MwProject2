@model MwProject.Core.ViewModels.ProjectsViewModel
@using Microsoft.AspNetCore.Http;
@using MwProject.Helpers;
@using MwProject.Core.Models.Filters;

@{

    ProjectsFilter projectFilter;
    projectFilter = SessionHelper.GetObjectFromJson<ProjectsFilter>(Context.Session, "ProjectsFilter");
    ViewBag.Title = "Projekty";
}

<div class="row">
    <div class="col-10">
        <h1 class="mb-3 mt-4 display-4">Projekty</h1>
    </div>

    <div class="col-2">
        <div class="mt-2 mb-4 text-muted">
            <img src="@Url.Content("~/images/documents.png")" style="width: 100px;" />
        </div>
    </div>
</div>


@*  Formularz zgodny z bootstrap 5.0
    Formularz bez helpera beginform
    ponieważ ten formularz będziemy submit’ować w inny sposób.
    Tak, aby po kliknięci przycisku submit
    nie przeładowywała się strona, tylko odświeżała tabelka z projektami.
*@

<div class="p-3 mb-2 bg-light border rounded">
    <form id="filterForm" class="row gy-2 gx-3 align-items-center">


        <div class="col-1">
            @Html.LabelFor(x => x.ProjectsFilter.ordinalNumber)
            @Html.TextBoxFor(x => x.ProjectsFilter.ordinalNumber,
              new { @class = "form-control", placeholder = "Lp" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.Number)
            @Html.TextBoxFor(x => x.ProjectsFilter.Number,
              new { @class = "form-control", placeholder = "Numer" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.Title)
            @Html.TextBoxFor(x => x.ProjectsFilter.Title,
              new { @class = "form-control", placeholder = "Tytuł" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.CategoryId)
            @Html.DropDownListFor(x => x.ProjectsFilter.CategoryId,
               new SelectList(Model.Categories, "Id", "Name"),
               " -- wszystkie kategorie -- ",
               new { @class = "form-control" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.ProjectGroupId)
            @Html.DropDownListFor(x => x.ProjectsFilter.ProjectGroupId,
               new SelectList(Model.ProjectGroups, "Id", "Name"),
               " -- wszystkie programy -- ",
               new { @class = "form-control" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.ProjectManagerId)
            @Html.DropDownListFor(x => x.ProjectsFilter.ProjectManagerId,
               new SelectList(Model.ApplicationUsers, "Id", "UserName"),
               " -- wszyscy kierownicy -- ",
               new { @class = "form-control" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.Client)
            @Html.TextBoxFor(x => x.ProjectsFilter.Client,
              new { @class = "form-control", placeholder = "Klient" })
        </div>

        <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.ProjectStatusId)
            @Html.DropDownListFor(x => x.ProjectsFilter.ProjectStatusId,
               new SelectList(Model.ProjectStatuses, "Id", "Name"),
               " -- wszystkie kategorie -- ",
               new { @class = "form-control" })
        </div>

          <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.RelatedNumbers)
            @Html.TextBoxFor(x => x.ProjectsFilter.RelatedNumbers,
              new { @class = "form-control", placeholder = "Powiązane Numery" })
        </div>

         <div class="col-3">
            @Html.LabelFor(x => x.ProjectsFilter.ProjectTeamMemberId)
            @Html.DropDownListFor(x => x.ProjectsFilter.ProjectTeamMemberId,
               new SelectList(Model.ApplicationUsers, "Id", "UserName"),
               " -- wszyscy uczestnicy -- ",
               new { @class = "form-control" })
        </div>

        <div class="form-check form-switch mb-3 col-1">
            <br>
            @Html.CheckBoxFor(x => x.ProjectsFilter.IsExecuted, new { @class = "form-check-input" })
            @Html.LabelFor(x => x.ProjectsFilter.IsExecuted, new { @class = "form-check-label" })
        </div>

        <div class="form-check form-switch mb-3 col-1">
            <br>
            @Html.CheckBoxFor(x => x.ProjectsFilter.ShowProjectsWithNotifications, new { @class = "form-check-input" })
            @Html.LabelFor(x => x.ProjectsFilter.ShowProjectsWithNotifications, new { @class = "form-check-label" })
        </div>

         <div class="form-check form-switch mb-3 col-1">
            <br>
            @Html.CheckBoxFor(x => x.ProjectsFilter.MyProjects, new { @class = "form-check-input" })
            @Html.LabelFor(x => x.ProjectsFilter.MyProjects, new { @class = "form-check-label" })
        </div>

        <div class="col-1">
            <button type="submit" class="btn btn-outline-success">Filtruj</button>
        </div>

    </form>
</div>

@*
    <div class="row">
        <div class="col-12">
            <button class="btn btn-primary btn mt-4"
                    onclick='window.location.href = "@Url.Action("Project","Project")"'>
                Dodaj
            </button>
        </div>
    </div>
*@

@* tabela z listą projektów *@
<div class="row">
    <div class="col-12">
        @await Html.PartialAsync("_ProjectsTablePartial.cshtml", Model)
    </div>
</div>


@section scripts
{
    <script type="text/javascript">
        // ------------------------------------------------------------------------------------------------------
        // funkcja zostanie wywołana gdy zostanie załadowany już cały widok

        $(document).ready(function () {
        // najpierw zaznaczamy formularz o id = filterForm
        // chcemy aby po kliknięci przycisku zostałą wywołana taka funkcja
        // a chcemy, żeby za pomocą ajax'a została wywołana odpowiednia funkcja z kontrolera
        // przesyłamy zserializowane dane z tego formularza
        // jeżeli zakończone sukcesem, to zostanie zwrócona tabelka z widoku częściowego

            $('#filterForm').submit(function () {
                $.ajax({
                    type: 'POST',
                    url: "@Url.Action("Projects","Project")",
                    data: $(this).serialize(),
                    success: function (data) {
                        $('#projectsTable').html(data);
                    },
                    error: function (data) {
                        alert(data.message + ' filter ')
                    },
                    dataType: "html"
                });
                // return false konieczne aby nie wykonał się jeszcze raz submit
                return false;
            });
        });

        // ------------------------------------------------------------------------------------------------------

        function deleteProject(id, btn) {
            if (!confirm("Czy na pewno chcesz usunąć projekt ?"))
                return;

            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeleteProject","Project")",
                data: {
                    id: id
                },
                success: function (data) {
                    if (data.success) {
                        // usuwanie z tabeli w html'u
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                    }
                    else {
                        alert(data.message + ' Akcja w kontrolerze zwróciła błąd');
                    }
                },
                error: function (data) {
                    alert(data.message + ' Nie znaleziono Akcji DeleteProject w kontrolerze Project');
                },
                dataType: 'json'

            });
        }
       // ------------------------------------------------------------------------------------------------------


    </script>
}
